
#
# WepSIM (https://wepsim.github.io/wepsim/)
#

begin
{
          # ensure R0 is zero
          (EXCODE=0, T11, MR=1, SelC=0, LC=1),

          # if (INT) go mrti
          (A0=0, B=0, C=1, MADDR=mrti),

 fetch:   # MAR <- PC
          # MBR <- Mem[MAR]
          # IR  <- MBR, PC <- PC + 4
          # jump to associated microcode for op. code
          (T2, C0),
          (TA, R, BW=11, M1=1, C1=1),
          (M2, C2, T1, C3),
          (A0, B=0, C=0),

 mrti:    # MBR <- DB <- INTV
          (INTA, BW=11, M1=1, C1=1),

          # RT1 <- MBR
          (T1=1, C4=1),

 csw_rt1: # push PC
          (MR=1, SELA=10, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=10, LC=1, C0),
          (T2=1, M1=0, C1),
          (BW=11, TA=1, TD=1, W=1)

          # push SR
          (MR=1, SELA=10, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=10, LC=1, C0),
          (T8=1, M1=0, C1),
          (BW=11, TA=1, TD=1, W=1),

          # MAR <- RT1*4
          (MA=1, MB=10, MC=1, SELCOP=1100, T6, M2=0, C0),

          # MBR <- MP[MAR]
          (TA=1, R=1, BW=11, M1=1, C1=1),

          # PC <- MAR
          (T1, M2=0, C2),

          # go fetch
          (A0=0, B=1, C=0, MADDR=fetch)
}

la rr1 u32{
      co=010001,
      nwords=2,
      rr1=reg(25,21),
      u32=inm(63,32),
      # MAR <- PC
      # PC <- PC + 4; MBR <- Mem[MAR]
      # RR1 <- MBR; Fetch
      {
          (T2, C0),
          (M2, C2, R, TA, M1, BW=11, C1),
          (SELC=10101, LC, T1, A0=1, B=1, C=0)
      }
}

sc rr1 rr2 rr3{
      co=010010,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      # MAR <- RR3; RT1 <- RR3
      # MBR <- RR1; 
      # Mem[MAR] <- MBR
      # MAR <- RR3 + 4
      # MBR <- RR2
      # Mem[MAR] <- MBR; Fetch
      {
          (SELA=01011, T9, C0, C4),      
          (SELA=10101, T9, C1),
          (BW=11, TD, TA, W),
          (MA, SELCOP=1010, MC, MB=10, T6, C0),
          (SELA=10000, T9, C1),
          (BW=11, TD, TA, W, A0=1, B=1, C=0),
      }
}

lc rr1 rr2 rr3{
      co=010011,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      # MAR <- RR3; RT1 <- RR3
      # MBR <- Mem[MAR]; 
      # RR1 <- MBR
      # MAR <- RR3 + 4
      # MBR <- Mem[MAR]; 
      # RR2 <- MBR; Fetch
      {
          (SELA=01011, T9, C0, C4),      
          (R, TA, M1, BW=11, C1),
          (T1, SELC=10101, LC),
          (MA, SELCOP=01010, MC, MB=10, T6, C0),
          (R, TA, M1, BW=11, C1),
          (T1, SELC=10000, LC, A0=1, B=1, C=0),
      }
}

addc rr1 rr2 rr3 rr4{
      co=010100,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      rr4=reg(10,6),
      # RR1 <- RR1 + RR3 (SR)
      # RR2 <- RR2 + RR4; Fetch
      {
          (SELCOP=01010, MC, SELA=10101, SELB=01011, T6, SELC=10101, LC, SELP=11, M7, C7),      
          (SELCOP=01010, MC, SELA=10000, SELB=00110, T6, SELC=10000, LC, SELP=00, A0=1, B=1, C=0)
      }
}

mulc rr1 rr2 rr3 rr4{
      co=010101,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      rr4=reg(10,6),
      # RT1 <- RR1 * RR3
      # RT2 <- RR2 * RR4
      # RT3 <- RT1 - RT2 (SR)
      # RT1 <- RR1 * RR4
      # RT2 <- RR2 * RR3
      # RR2 <- RT1 + RT2
      # RR1 <- RT3; Fetch
      {
          (SELCOP=01100 , MC, SELA=10101, SELB=01011, T6, C4),
          (SELCOP=01100 , MC, SELA=10000, SELB=00110, T6, C5),
          (SELCOP=01011, MC, MA, MB=01, C6, SELP=11, M7, C7)
          (SELCOP=01100 , MC, SELA=10101, SELB=00110, T6, C4),
          (SELCOP=01100 , MC, SELA=10000, SELB=01011, T6, C5),
          (SELCOP=01010, MC, MA, MB=01, T6, SELC=10000, LC),
          (T7, SELC=10101, LC, A0=1, B=1, C=0)
      }
}

beqc rr1 rr2 rr3 rr4 s6{
      co=110100,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      rr4=reg(10,6),
      s6=inm(5,0), 
      # RT1 <- RR1 - RR3 1011
      # RT2 <- RR2 - RR4 1011
      # Z <- !(RT1 OR RT2); SI Z ES 0, SALTAR A beqc_verdadero
      # Fetch (Falso)
      # True: 
      # RT1 <- PC
      # RT2 <- S6
      # PC <- RT1 + RT2 
      # Fetch
      {
        (SELCOP=01011, MC, SELA=10101, SELB=01011, T6, C4),
        (SELCOP=01011, MC, SELA=10000, SELB=00110, T6, C5),
        (SELCOP=00100, MC, MA, MB=01, SELP=11, M7, C7),
        (C=110, B=0, A0=0, MADDR=beqc_verdadero)
        (A0=1, B=1, C=0),
    beqc_verdadero:
        (T2, C4),
        (T3, SIZE=110, C5),
        (SELCOP=01010, MC, MA, MB=01, T6, C2),
        (A0=1, B=1, C=0)
      }
}

beqc rr1 rr2 rr3 rr4 s6{
      co=110100,
      nwords=1,
      rr1=reg(25,21),
      rr2=reg(20,16),
      rr3=reg(15,11),
      rr4=reg(10,6),
      s6=inm(5,0), 
      # RT1 <- RR1 - RR3 1011
      # RT2 <- RR2 - RR4 1011
      # Z <- RT1 AND RT2; SI Z ES 0, SALTAR A beqc_verdadero
      # Fetch (Falso)
      # True: 
      # RT1 <- PC
      # RT2 <- S6
      # PC <- RT1 + RT2 
      # Fetch
      {
        (SELCOP=01011, MC, SELA=10101, SELB=01011, T6, C4),
        (SELCOP=01011, MC, SELA=10000, SELB=00110, T6, C5),
        (SELCOP=00010, MC, MA, MB=01, SELP=11, M7, C7),
        (C=110, B=0, A0=0, MADDR=beqc_verdadero)
        (A0=1, B=1, C=0),
    beqc_verdadero:
        (T2, C4),
        (T3, SIZE=110, C5),
        (SELCOP=01010, MC, MA, MB=01, T6, C2),
        (A0=1, B=1, C=0)
      }
}

call u20{
      co=100001,
      nwords=1,
      u20=inm(19,0),
      # RA <- PC
      # PC <- U20
      {
        (SELC=1, LC, MR, T2),
        (SIZE=10011, T3, C2, A0=1, B=1, C=0)
      }

}

ret{
      co=100010,
      nwords=1,
      # RA <- PC
      {
        (SELA=1, MR, T9, C2, A0=1, B=1, C=0)
      }

}

hcf{
      co=100011,
      nwords=1,
      # PC <- 0; SR <- 0
      {
        (C2, C7, EXCODE=0, T11, A0=1, B=1, C=0)
      }

}

#

# Register naming
#

#        ABI Name       Description                        Saver
#0        zero          Hard-wired zero                    --
#1        ra            Return address                     Caller
#2        sp            Stack pointer                      Callee
#3        gp            Global pointer                     --
#4        tp            Thread pointer                     --
#5        t0            Temporaries                        Caller
#6        t1            Temporaries                        Caller
#7        t2            Temporaries                        Caller
#8        s0/fp         Saved register/frame pointer       Caller
#9        s1            Saved register                     Callee
#10       a0            Function arguments/return values   Caller
#11       a1            Function arguments/return values   Caller
#12       a2            Function arguments                 Caller
#13       a3            Function arguments                 Caller
#14       a4            Function arguments                 Caller
#15       a5            Function arguments                 Caller
#16       a6            Function arguments                 Caller
#17       a7            Function arguments                 Caller
#18       s2            Saved registers                    Callee
#19       s3            Saved registers                    Callee
#20       s4            Saved registers                    Callee
#21       s5            Saved registers                    Callee
#22       s6            Saved registers                    Callee
#23       s7            Saved registers                    Callee
#24       s8            Saved registers                    Callee
#25       s9            Saved registers                    Callee
#26       s10           Saved registers                    Callee
#27       s11           Saved registers                    Callee
#28       t3            Temporaries                        Caller
#29       t4            Temporaries                        Caller
#30       t5            Temporaries                        Caller
#31       t6            Temporaries                        Caller

registers
{
    0=(zero,  x0),
    1=(ra,    x1),
    2=(sp,    x2) (stack_pointer),
    3=(gp,    x3),
    4=(tp,    x4),
    5=(t0,    x5),
    6=(t1,    x6),
    7=(t2,    x7),
    8=(s0,    x8),
    9=(s1,    x9),
    10=(a0,  x10),
    11=(a1,  x11),
    12=(a2,  x12),
    13=(a3,  x13),
    14=(a4,  x14),
    15=(a5,  x15),
    16=(a6,  x16),
    17=(a7,  x17),
    18=(s2,  x18),
    19=(s3,  x19),
    20=(s4,  x20),
    21=(s5,  x21),
    22=(s6,  x22),
    23=(s7,  x23),
    24=(s8,  x24),
    25=(s9,  x25),
    26=(s10, x26),
    27=(s11, x27),
    28=(t3,  x28),
    29=(t4,  x29),
    30=(t5,  x30),
    31=(t6,  x31)
}

